{"version":3,"sources":["app.js","mainService.js","mapService.js","gear/gearDirective.js","jumbo/jumboCtrl.js","guides/guidesCtrl.js","search/searchCtrl.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","views","service","$http","key","resorts","city","geoplugin_city","geoplugin_region","lat","geoplugin_latitude","long","geoplugin_longitude","searchKeyword","searchText","location","radius","getResorts","geo","lng","console","log","method","then","response","data","results","pass","geoUrl","components1","components2","geoCode","zipCity","geoData","geometry","mainService","map","infowindow","currentL","initMap","Number","google","maps","Map","document","getElementById","center","zoom","InfoWindow","places","PlacesService","callback","arr","i","length","createMarker","place","placeLoc","marker","Marker","position","event","addListener","setContent","name","formatted_address","open","directive","restrict","scope","$scope","link","elem","attrs","$","click","pathname","replace","hostname","target","hash","slice","animate","scrollTop","offset","top","$sce","vid","trustAsResourceUrl","val","mapService","zipOcity","showMap"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('snowrider', ['ui.router'])\n    .config(function($stateProvider, $urlRouterProvider) {\n\n        $urlRouterProvider.otherwise('/');\n\n        $stateProvider\n            .state('home', {\n                url: '/',\n                templateUrl: \"./views/jumbo/jumbo.html\",\n                controller: 'jumboCtrl'\n            })\n            .state('guide', {\n                url: '/guide',\n\n                // templateUrl: \"./views/guides/guides.html\",\n                // controller: 'guidesCtrl',\n\n                views: {\n                    '': {\n                        templateUrl: \"./views/guides/guides.html\",\n                        controller: 'guidesCtrl',\n                    },\n\n                    \"featured@guide\": {\n                        templateUrl: './views/guides/resort.html'\n                    }\n                }\n\n            })\n            .state('gear', {\n                url: '/gear',\n                templateUrl: './views/gear/gear.html'\n            })\n            .state('search', {\n              url: '/search',\n              templateUrl: './views/search/search.html',\n              controller: 'searchCtrl'\n            })\n    })\n","angular.module('snowrider')\n  .service('mainService', function ($http) {\n\n    // google places Map api key\n    const key = '&key=AIzaSyCY0pUHVH0TCKwnYDFZpl2xkqGkexLRjVg';\n\n    var resorts;\n\n    // with geoplugin api\n      this.city = geoplugin_city();\n      this.state = geoplugin_region();\n      this.lat = geoplugin_latitude();\n      this.long = geoplugin_longitude();\n\n    // search request\n      let searchKeyword = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=';\n      // -33.8670522,151.1957362&type=restaurant&keyword=&key=YOUR_API_KEY\n\n      let searchText = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=ski+snowboard+resorts&rankBy=distance'\n      var  location = '&location=' + this.lat + ',' + this.long;\n      let radius = '&radius=20000';\n\n      this.getResorts = function(geo) { // when to convert the user iputed city name or zipcode\n        if(geo) {\n          location = '&location=' + geo.lat + ',' + geo.lng;\n          console.log(location);\n        }\n        return $http({\n\n\n          method: 'GET',\n          url: searchText + location + key,\n          //  'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise' + key\n\n\n          // headers: {\n          //   'Access-Control-Allow-Origin: * ',\n          //   'Access-Control-Allow-Headers: AUTHORIZATION',\n          //   'Access-Control-Allow-Methods: GET'\n          // }\n        }).then(function (response) {\n          console.log(response);\n          resorts = response.data.results;\n          console.log(resorts);\n          // response.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n          return response.data.results;\n        })\n      }\n\n      this.pass = function () {\n        return resorts;\n      }\n\n      const geoUrl = 'https://maps.googleapis.com/maps/api/geocode/json?address=';\n      const components1 = '&components=administrative_area_level_3:';\n      const components2 = '|postal_code:';\n\n      this.geoCode = function (zipCity) {\n          //console.log(zipcodeBaseUrl + zip + zipcodeComponents + zip + '&sensor=true' + zipcodeKey);\n          return $http({\n            method: 'GET',\n            url: geoUrl + zipCity + key\n          }).then(function (results){\n\n              // if(results.data.status === \"ZERO_RESULTS\") {\n              //   return false;\n              // }\n\n              console.log(results);\n              let geoData = {};\n\n              geoData.lat = results.data.results[0].geometry.location.lat;\n              geoData.lng = results.data.results[0].geometry.location.lng;\n              // geoData.zip = zipCity;\n              // const address = results.data.results[0].formatted_address;\n              // geoData.address = address.slice(0, address.indexOf(zip)).trim();\n              // geoData.city = address.slice(0, address.indexOf(zip)).trim();//parse the data down to just the city and state\n              return geoData;\n          })\n}\n\n// '\"https://maps.googleapis.com/maps/api/geocode/json?address=Dallas&components=administrative_area:Dallas|postal_code:Dallas&key=AIzaSyCY0pUHVH0TCKwnYDFZpl2xkqGkexLRjVg\"'\n\n  })\n","angular.module('snowrider')\n  .service('mapService', function ($http, mainService) {\n\n    let map;\n    let service;\n    let infowindow;\n    let  currentL;\n    this.initMap = function(geo, results) {\n      //location\n      if (geo) {\n        console.log(geo);\n        currentL = geo;\n        // {lat: Number(geo.lat), lng: Number(geo.lng)\n      } else {\n        currentL = {lat: Number(mainService.lat), lng: Number(mainService.long)};\n      }\n\n\n        //creating the new map with the geocode of the currentL\n        map = new google.maps.Map(document.getElementById('map'), {\n          center: currentL,\n          zoom: 10\n        });\n\n        infowindow = new google.maps.InfoWindow();\n        service = new google.maps.places.PlacesService(map);\n\n        // service.textSearch({\n        //   location: currentL,\n        //   radius: 30000,\n        //   query: ['ski, snowboard resorts'],\n        //   rankBy: google.maps.places.RankBy.DISTANCE\n        // }, callback);\n        callback(results);\n      }\n\n\n\n      function callback(data) {\n        // if (status === google.maps.places.PlacesServiceStatus.OK) {\n          // console.log(results)\n          // for (var i = 0; i < results.length; i++) {\n          //   createMarker(results[i]); // creating a makrer for each of the result in the map\n          // }\n          var arr;\n          console.log(data);\n          if (data) { //made a condition to not initia map right away\n            arr = data;\n          } else {\n            arr = mainService.pass();\n          }\n          for (var i = 0; i < arr.length; i++) {\n            createMarker(arr[i]); // creating a makrer for each of the result in the map\n          }\n        // }\n      }\n\n      function createMarker(place) {\n        var placeLoc = place.geometry.location;\n        var marker = new google.maps.Marker({\n          map: map,\n          position: place.geometry.location\n        });\n\n        google.maps.event.addListener(marker, 'click', function() {\n          infowindow.setContent(place.name + '<br>' + place.formatted_address);\n          // infowindow.setContent(place.formatted_address);\n\n          infowindow.open(map, this);\n        });\n      }\n\n});\n","angular.module('snowrider')\n    .directive('gearDirective', function() {\n\n        return {\n            restrict: 'EA',\n\n            templateUrl: './views/gear/gearDirective.html',\n\n            scope: {\n                // lesson: '=',\n                // datAlert: '&'\n            },\n\n            controller: function($scope) {\n\n            },\n\n            link: function(scope, elem, attrs) { //elem attribute was different, so it was not applying\n\n              $('a[href*=\"#\"]:not([href=\"#\"])').click(function() {\n                  if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n                      var target = $(this.hash);\n                      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n                      if (target.length) {\n                          $('html, body').animate({\n                              scrollTop: target.offset().top\n                          }, 1000);\n                          return false;\n                      }\n                  }\n              });\n\n\n                // scope.getSchedule.then(function (response) {\n                //   scope.schedule = response.data;\n                //\n                //   for (var i = 0; i < response.data.length; i++) {\n                //\n                //     if (response.data[i].lesson === scope.lesson) {\n                //       scope.lessonDay = response.data[i].weekday\n                //       elem.css(\"text-decoration\", \"line-through\");\n                //       return;\n                //     }\n                //   }\n                // })\n            }\n\n        }\n\n    })\n","angular.module('snowrider')\n  .controller('jumboCtrl', function ($scope, $sce) {\n    $scope.vid = $sce.trustAsResourceUrl('../img/jumbo.mp4');\n  })\n","angular.module('snowrider')\n  .controller('guidesCtrl', function ($scope, $sce) {\n\n    $scope.val = false;\n  })\n","angular.module('snowrider')\n  .controller('searchCtrl', function ($scope, mainService, mapService) {\n\n    let geoData;\n    var  data;\n\n    $scope.getResorts = function (zipOcity) {// whne ng-clicked to initiate\n      mainService.getResorts().then(function (results) {\n       $scope.resorts = results; // so i can scope it\n       return results;\n\n     })\n    //  return data;\n    }\n\n    $scope.showMap = function () {\n      mapService.initMap();\n    }\n\n\n\n    $scope.geoCode = function (zipCity) {\n\n      mainService.geoCode(zipCity).then(function (response) {\n        console.log(response);\n        geoData =  response;\n        return geoData\n      })\n      .then(function (geo) {\n        console.log(geo);\n        // var data = $scope.getResorts(geo);\n        // console.log($scope.getResorts(geo));\n\n      // return  $scope.getResorts(geo)\n      return mainService.getResorts(geo).then(function (results) {\n       $scope.resorts = results; // so i can scope it\n       return results;\n     })\n      })\n      .then(function (results) {\n        console.log(results);\n        console.log(geoData);\n        mapService.initMap(geoData, results);\n      })\n    }\n\n\n  })\n"]}